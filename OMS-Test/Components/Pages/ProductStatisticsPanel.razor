@using BlazorBootstrap
@using System.Globalization

<div class="card mb-3">
    <div class="card-header bg-light">
        <small class="mb-0">@ProductName Sales Analysis - @IntervalType View</small>
    </div>
    <div class="card-body">
        @if (HasData)
        {
            <div class="product-chart-container">
                <h5 class="mb-3 text-center">Sales Trends</h5>
                <div class="container-fluid overflow-x-auto">
                    <LineChart @ref="lineChart" Width="800" Height="400" />
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string ProductName { get; set; } = "";
    
    [Parameter]
    public List<string> Labels { get; set; } = new();
    
    [Parameter]
    public List<int> UnitsSoldData { get; set; } = new();
    
    [Parameter]
    public bool HasData { get; set; } = false;
    
    [Parameter]
    public string IntervalType { get; set; } = "Weekly"; 
    
    [Parameter]
    public List<DateTime> DateLabels { get; set; } = new();
    
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    
    private int datasetsCount;
    private int labelsCount;
    
    private string _previousIntervalType = "";
    private DateTime? _previousFirstDate;
    private int _previousDataCount = 0;
    private int _previousDataSum = 0;
    
    private List<string> FormattedLabels => FormatLabels();
    
    private List<string> FormatLabels()
    {
        if (IntervalType.Equals("Monthly", StringComparison.OrdinalIgnoreCase))
        {
            if (DateLabels.Count > 0)
            {
                var firstDate = DateLabels.OrderBy(d => d).FirstOrDefault();
                var month = firstDate.Month;
                var year = firstDate.Year;
                
                var daysInMonth = DateTime.DaysInMonth(year, month);
                var allDaysInMonth = new List<string>();
                
                for (int day = 1; day <= daysInMonth; day++)
                {
                    var date = new DateTime(year, month, day);
                    allDaysInMonth.Add(date.ToString("MMM dd"));
                }
                
                return allDaysInMonth;
            }
        }
        else if (IntervalType.Equals("Weekly", StringComparison.OrdinalIgnoreCase))
        {
            if (DateLabels.Count > 0)
            {
                var orderedDates = DateLabels.OrderBy(d => d).ToList();
                var firstDate = orderedDates.FirstOrDefault();
                
              
                int daysToSubtract = firstDate.DayOfWeek == DayOfWeek.Sunday ? 6 : ((int)firstDate.DayOfWeek - 1);
                
                var startOfWeek = firstDate.Date.AddDays(-daysToSubtract);
                
                var allDaysInWeek = new List<string>();
                
                for (int dayOffset = 0; dayOffset < 7; dayOffset++)
                {
                    var date = startOfWeek.AddDays(dayOffset);
                    allDaysInWeek.Add(date.ToString("ddd, MMM dd"));
                }
                
                return allDaysInWeek;
            }
        }
        
        return Labels;
    }
    
    protected override void OnParametersSet()
    {
        if (HasData && Labels.Count > 0)
        {
            DateTime? currentFirstDate = DateLabels.Count > 0 ? 
                DateLabels.OrderBy(d => d).FirstOrDefault() : null;
                
            int currentDataSum = UnitsSoldData.Sum();
            bool hasChanges = false;
            
            if (_previousIntervalType != IntervalType || 
                _previousDataCount != UnitsSoldData.Count ||
                _previousDataSum != currentDataSum ||
                (currentFirstDate != null && _previousFirstDate != currentFirstDate))
            {
                hasChanges = true;
                
                _previousIntervalType = IntervalType;
                _previousFirstDate = currentFirstDate;
                _previousDataCount = UnitsSoldData.Count;
                _previousDataSum = currentDataSum;
            }
            
            if (hasChanges)
            {
                UpdateChartData();
                
                _chartNeedsUpdate = true;
            }
        }
        
        base.OnParametersSet();
    }
    
    protected override void OnInitialized()
    {
        lineChartOptions = new()
        {
            IndexAxis = "x",
            Interaction = new Interaction { Mode = InteractionMode.Index, Intersect = false },
            Responsive = true,
        };
        
        UpdateChartData();
        _chartNeedsUpdate = true;
    }
    
    private void AddProductDatasets()
    {
        if (!HasData || Labels.Count == 0) return;
        
        var datasets = new List<IChartDataset>();
        
        var unitsSoldColor = ColorUtility.CategoricalTwelveColors[0].ToColor();
        var unitsSoldDataset = new LineChartDataset
        {
            Label = "Units Sold",
            Data = UnitsSoldData.Select(x => (double?)Convert.ToDouble(x)).ToList(),
            BackgroundColor = unitsSoldColor.ToRgbaString(),
            BorderColor = unitsSoldColor.ToRgbString(),
            PointRadius = new List<double> { 5 },
            PointHoverRadius = new List<double> { 8 },
        };
        datasets.Add(unitsSoldDataset);
        
        chartData.Datasets = datasets;
    }
    
    private void UpdateChartData()
    {
        chartData = new ChartData 
        { 
            Labels = FormattedLabels,
            Datasets = new List<IChartDataset>() 
        };
        
        AddProductDatasets();
    }
    
    private bool _chartNeedsUpdate = false;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (lineChart != null)
        {
            try
            {
                if (firstRender)
                {
                    await lineChart.InitializeAsync(chartData, lineChartOptions);
                }
                else if (_chartNeedsUpdate)
                {
                    await lineChart.UpdateAsync(chartData, lineChartOptions);
                    _chartNeedsUpdate = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error with chart: {ex.Message}");
            }
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }
}