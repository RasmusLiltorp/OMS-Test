@page "/OMS/ModifyOrder"
@using OMS_Services;
@inject DataService DataService
@rendermode InteractiveServer
@using BlazorBootstrap
@inject NavigationManager NavigationManager
@using DTOs;

<PageTitle>Modify Order</PageTitle>

<div class="topnav">
  <a href="./OMS/Manage">OMS</a>
  <a href="./OMS/SalesReportsOverview">Sales Reports</a>
</div>

<h3>Modify Existing Order</h3>

<div class="mb-4">
    <label class="form-label">Search & Select Order</label>
    <AutoComplete TItem="OrderDTO"
                  @bind-Value="searchText"
                  DataProvider="SearchOrdersProvider"
                  PropertyName="OrderId"
                  Placeholder="Search by order ID or customer name..."
                  OnChanged="OnOrderSelected"
                  class="form-control" />
</div>

@if (selectedOrder != null)
{
    <EditForm Model="@selectedOrder" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Customer Name</label>
            <InputText class="form-control" @bind-Value="selectedOrder.Customer" />
        </div>

        <div class="mb-3">
            <label class="form-label">Order Date</label>
            <InputDate class="form-control" @bind-Value="selectedOrder.OrderDate" />
        </div>

        <div class="mb-3">
            <label class="form-label">Track & Trace</label>
            <InputText class="form-control" @bind-Value="selectedOrder.TrackAndTrace" placeholder="e.g. T123456789DK" />
        </div>

        <h5>Products</h5>
        @foreach (var product in selectedOrder.Products)
        {
            <div class="mb-3 row">
            </div>
        }
    </EditForm>
}

@code {
    private OrderDTO? selectedOrder;
    private string selectedOrderId;
    private bool showConfirmation = false;
    private string? searchText;

    private void LoadSelectedOrder(ChangeEventArgs e)
    {
        if (e.Value?.ToString() is string id)
        {
            selectedOrderId = id;
            var original = DataService.OrderLines?.FirstOrDefault(o => o.OrderId == id);
            if (original is null)
                return;

            selectedOrder = new OrderDTO
            {
                OrderId = original.OrderId,
                Date = original.Date,
                FulfillmentState = original.FulfillmentState,
                TotalCost = original.TotalCost,
                CustomerInfo = new CustomerInfoDTO
                {
                    CustomerId = original.CustomerInfo.CustomerId,
                    Name = original.CustomerInfo.Name,
                    Email = original.CustomerInfo.Email
                },
                ShippingInfo = new ShippingInfoDTO
                {
                    Address1 = original.ShippingInfo.Address1,
                    Address2 = original.ShippingInfo.Address2,
                    ZipcodeId = original.ShippingInfo.ZipcodeId,
                    CountryId = original.ShippingInfo.CountryId,
                    TrackingNumber = original.ShippingInfo.TrackingNumber
                },
                LineElements = original.LineElements.Select(le => new LineElementDTO
                {
                    ProductUuid = le.ProductUuid,
                    Amount = le.Amount,
                    Price = le.Price
                }).ToList()
            };


            showConfirmation = false;
        }
    }

    private void AddProduct()
    {
        if (selectedOrder?.LineElements is not null)
        {
            selectedOrder.LineElements.Add(new LineElementDTO { ProductUuid = 0, Amount = 1, Price = 0 });
        }
    }

    private void RemoveProduct(LineElementDTO item)
    {
        if(selectedOrder?.LineElements is not null)
        {
            selectedOrder.LineElements.Remove(item);
        }
    }

    private void HandleValidSubmit()
    {
        if (selectedOrder is not null)
        {
            var index = DataService.OrderLines.FindIndex(o => o.OrderId == selectedOrder.OrderId);
            if (index != -1)
            {
                DataService.OrderLines[index] = selectedOrder;
                showConfirmation = true;
            }
        }
    }


    private async Task<AutoCompleteDataProviderResult<OrderDTO>> SearchOrdersProvider(AutoCompleteDataProviderRequest<OrderDTO> request)
    {
        await Task.Delay(1); // tiny delay to simulate async
        string input = request.Filter?.Value?.ToString() ?? "";
            var results = DataService.OrderLines
            .Where(o => o.OrderId.Contains(input, StringComparison.OrdinalIgnoreCase)
                    || (o.CustomerInfo?.Name?.Contains(input, StringComparison.OrdinalIgnoreCase) ?? false))
            .ToList();

        return new AutoCompleteDataProviderResult<OrderDTO>
        {
            Data = results,
            TotalCount = results.Count
        };
    }

      private void OnOrderSelected(OrderDTO selected)
    {
        selectedOrder = new OrderDTO
        {
            OrderId = selected.OrderId,
            Date = selected.Date,
            FulfillmentState = selected.FulfillmentState,
            TotalCost = selected.TotalCost,
            CustomerInfo = new CustomerInfoDTO
            {
                CustomerId = selected.CustomerInfo.CustomerId,
                Name = selected.CustomerInfo.Name,
                Email = selected.CustomerInfo.Email
            },
            ShippingInfo = new ShippingInfoDTO
            {
                Address1 = selected.ShippingInfo.Address1,
                Address2 = selected.ShippingInfo.Address2,
                ZipcodeId = selected.ShippingInfo.ZipcodeId,
                CountryId = selected.ShippingInfo.CountryId,
                TrackingNumber = selected.ShippingInfo.TrackingNumber
            },
            LineElements = selected.LineElements.Select(le => new LineElementDTO
            {
                ProductUuid = le.ProductUuid,
                Amount = le.Amount,
                Price = le.Price
            }).ToList()
        };

        showConfirmation = false;
    }

        private void OnProductChanged(ChangeEventArgs e, LineElementDTO item)
    {
        var productIdStr = e.Value?.ToString();
        if (!string.IsNullOrEmpty(productIdStr) && int.TryParse(productIdStr, out int productId))
        {
            item.ProductUuid = productId;
            
            var product = DataService.Products.FirstOrDefault(p => p.ProductID == productIdStr);
            if (product != null)
            {
                item.Price = product.Price;
            }
        }
    }


    private void CancelOrder()
    {
        NavigationManager.NavigateTo("/OMS/Manage");
    }
}