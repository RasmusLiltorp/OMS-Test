@page "/OMS/ModifyOrder"
@using OMS_Test.Services
@inject MockDataService MockData
@rendermode InteractiveServer
@using BlazorBootstrap
@inject NavigationManager NavigationManager
@using DTOs

<PageTitle>Modify Order</PageTitle>

<div class="topnav">
  <a href="./OMS/Manage">OMS</a>
  <a href="./OMS/SalesReportsOverview">Sales Reports</a>
</div>

<h3>Modify Existing Order</h3>

<div class="mb-4">
    <label class="form-label">Search & Select Order</label>
    <AutoComplete TItem="OrderLine"
                  @bind-Value="searchText"
                  DataProvider="SearchOrdersProvider"
                  PropertyName="OrderId"
                  Placeholder="Search by order ID or customer name..."
                  OnChanged="OnOrderSelected"
                  class="form-control" />
</div>

@if (selectedOrder != null)
{
    <EditForm Model="@selectedOrder" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Customer Name</label>
            <InputText class="form-control" @bind-Value="selectedOrder.Customer" />
        </div>

        <div class="mb-3">
            <label class="form-label">Order Date</label>
            <InputDate class="form-control" @bind-Value="selectedOrder.OrderDate" />
        </div>

        <div class="mb-3">
            <label class="form-label">Track & Trace</label>
            <InputText class="form-control" @bind-Value="selectedOrder.TrackAndTrace" placeholder="e.g. T123456789DK" />
        </div>

        <h5>Products</h5>
        @foreach (var product in selectedOrder.Products)
        {
            <div class="mb-3 row">
                <div class="col-4">
                    <select class="form-select" value="@product.ProductID" @onchange="(e) => OnProductChanged(e, product)">
                        <option disabled selected value="">Select product</option>
                        @foreach (var p in MockData.Products)
                        {
                            <option value="@p.ProductID">@p.ProductName (@p.Price.ToString("C"))</option>
                        }
                    </select>
                </div>
                <div class="col-2">
                    <InputNumber class="form-control" @bind-Value="product.Quantity" min="1" />
                </div>
                <div class="col-3">
                    <InputNumber class="form-control" @bind-Value="product.Price" step="0.01" />
                </div>
                <div class="col-2">
                    <button type="button" class="btn btn-danger" @onclick="@(() => RemoveProduct(product))">X</button>
                </div>
            </div>

        }

        <button type="button" class="btn btn-secondary mb-3" @onclick="AddProduct">+ Add Product</button>

        <div>
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="CancelOrder">Cancel</button>
        </div>
    </EditForm>
}

@if (showConfirmation)
{
    <div class="alert alert-success mt-3">Order updated successfully!</div>
}

@code {
    private OrderLine? selectedOrder;
    private string selectedOrderId;
    private bool showConfirmation = false;
    private string? searchText;

    private void LoadSelectedOrder(ChangeEventArgs e)
    {
        if (e.Value?.ToString() is string id)
        {
            selectedOrderId = id;
            var original = MockData.OrderLines?.FirstOrDefault(o => o.OrderId == id);
            if (original is null)
                return;

            selectedOrder = new OrderLine
            {
                OrderId = original.OrderId,
                Customer = original.Customer,
                OrderDate = original.OrderDate,
                TrackAndTrace = original.TrackAndTrace,
                Products = original.Products
                    .Select(p => new OrderProduct { ProductID = p.ProductID, Quantity = p.Quantity, Price = p.Price })
                    .ToList()
            };


            showConfirmation = false;
        }
    }

    private void AddProduct()
    {
        if (selectedOrder?.Products is not null)
        {
            selectedOrder.Products.Add(new OrderProduct { ProductID = "", Quantity = 1 });
        }
    }

    private void RemoveProduct(OrderProduct product)
    {
        selectedOrder?.Products.Remove(product);
    }

    private void HandleValidSubmit()
    {
        if (selectedOrder is not null)
        {
            var index = MockData.OrderLines.FindIndex(o => o.OrderId == selectedOrder.OrderId);
            if (index != -1)
            {
                MockData.OrderLines[index] = selectedOrder;
                showConfirmation = true;
            }
        }
    }


    private async Task<AutoCompleteDataProviderResult<OrderLine>> SearchOrdersProvider(AutoCompleteDataProviderRequest<OrderLine> request)
    {
        await Task.Delay(1); // tiny delay to simulate async
        string input = request.Filter?.Value?.ToString() ?? "";

        var results = MockData.OrderLines
            .Where(o => o.OrderId.ToString().Contains(input, StringComparison.OrdinalIgnoreCase)
                     || o.Customer.Contains(input, StringComparison.OrdinalIgnoreCase))
            .ToList();

        return new AutoCompleteDataProviderResult<OrderLine>
        {
            Data = results,
            TotalCount = results.Count
        };
    }

    private void OnOrderSelected(OrderLine selected)
    {
        var original = MockData.OrderLines?.FirstOrDefault(o => o.OrderId == selected.OrderId);
        if (original is null)
            return;

        selectedOrder = new OrderLine
        {
            OrderId = original.OrderId,
            Customer = original.Customer,
            OrderDate = original.OrderDate,
            TrackAndTrace = original.TrackAndTrace,
            Products = original.Products
                .Select(p => new OrderProduct { ProductID = p.ProductID, Quantity = p.Quantity, Price = p.Price })
                .ToList()
        };

        showConfirmation = false;
    }

    private void OnProductChanged(ChangeEventArgs e, OrderProduct product)
    {
        var newProductId = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(newProductId))
        {
            product.ProductID = newProductId;

            if (product.Price == 0)
            {
                var selected = MockData.Products.FirstOrDefault(p => p.ProductID == newProductId);
                if (selected != null)
                {
                    product.Price = selected.Price;
                }
            }
        }
    }


    private void CancelOrder()
    {
        NavigationManager.NavigateTo("/OMS/Manage");
    }


}