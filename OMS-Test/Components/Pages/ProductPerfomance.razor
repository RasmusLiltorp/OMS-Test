@page "/OMS/ProductPerformance"
@using BlazorBootstrap
@rendermode InteractiveServer

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<PageTitle>Product Performance</PageTitle>

<!-- Top navbar -->
<div class="topnav">
  <a href="../OMS">OMS</a>
  <a class="active" href="./OMS/SalesReportsOverview">Sales Reports</a>
</div>

<!-- Searchbar -->
<div class="mb-3 mt-4 d-flex justify-content-center align-items-center">
    <TextInput @bind-Value="@productId" style="width: 60%;"/>
    <button class="btn btn-outline-primary ms-1" type="button" @onclick="PerformSearch">
                    <i class="bi bi-search"></i>
     </button>
</div>

<!-- Search container -->
<div class="container mt-4">
    <div class="d-flex align-items-center justify-content-center mb-3">
        <div class="d-flex align-items-center">
            <small class="me-2">From:</small>
            <DateInput TValue="DateOnly" @bind-Value="@fromDate" Placeholder="From Date" class="form-control-sm" style="width: 150px;" />
        </div>
        <div class="d-flex align-items-center ms-3">
            <small class="me-2">To:</small>
            <DateInput TValue="DateOnly" @bind-Value="@toDate" Placeholder="To Date" class="form-control-sm" style="width: 150px;" />
        </div>
    </div>
    <div class="mt-2">
            <div class="card">
                <div class="card-header bg-light">
                    <small class="mb-0">Find orders based on productID</small>
                </div>
                <div class="card-body">
                @if(hasSearched == false)
                {
                    <div class="text-center text-muted py-5">
                        <i class="bi bi-search" style="font-size: 3rem;"></i>
                        <p class="mt-3">Enter a product ID and click search to view results</p>
                    </div>
                }
                else if (searchResults.Count == 0)
                {
                    <div class="text-center text-muted py-5">
                        <i class="bi bi-emoji-frown" style="font-size: 3rem;"></i>
                        <p class="mt-3">No results found for product ID: @searchText</p>
                    </div>
                }
                else
                {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Order Date</th>
                        </tr>
                    </thead>            
                    <tbody>
                        @foreach (var orderLine in searchResults)
                        {
                            <tr>
                                <td>@orderLine.OrderId</td>
                                <td>@orderLine.Customer</td>
                                <td>@orderLine.OrderDate.ToString("yyyy-MM-dd")</td>
                            </tr>
                        }
                    </tbody>
                </table>
                }
                </div>
            </div>
        </div>
</div>

@code {
    private string? productId = null;

    private bool hasSearched = false;
    private string? searchText = "";

    private DateOnly fromDate = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly toDate = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
    private List<OrderLine> searchResults = new List<OrderLine>();
    private List<OrderLine> orders;

    protected override void OnInitialized()
    {
        orders = orderlines;
        searchResults = orders.ToList();
    }

    private void PerformSearch()
    {
         hasSearched = true;
         searchText = productId;

        if (string.IsNullOrWhiteSpace(productId))
        {
            searchResults = new List<OrderLine>();
            return;
        }
        var filteredOrders = orders
            .Where(orderLine => 
                orderLine.ProductIDs.Any(productId => 
                    productId.Contains(this.productId, StringComparison.OrdinalIgnoreCase)
                )
            )
            .ToList();

        bool isFromDateSet = fromDate != default;
        bool isToDateSet = toDate != default;

        if (isFromDateSet || isToDateSet)
        {
            filteredOrders = filteredOrders.Where(o => 
            {
                bool fromDateCondition = !isFromDateSet || o.OrderDate >= fromDate;
                
                bool toDateCondition = !isToDateSet || o.OrderDate <= toDate;
                
                return fromDateCondition && toDateCondition;
            }).ToList();
        }

        // Update search results
        searchResults = filteredOrders;
        
        if (searchResults.Count == 0)
        {
            // No results found logic
        }

        StateHasChanged();
    }

    private List<Product> GetProductsForOrder(OrderLine order)
    {
        return products.Where(p => order.ProductIDs.Contains(p.ProductID)).ToList();
    }

    private string GetProductName(string productId)
    {
        var product = products.FirstOrDefault(p => p.ProductID == productId);
        return product?.ProductName;
    }

    public class Product
    {
        public required string ProductID { get; set; }
        public required double Price { get; set; }
        public required double Weight { get; set; }
        public required string ProductName { get; set; }

    }
    public class OrderLine
    {
        public required string Customer {get; set;}
        public required List<string> ProductIDs {get; set;}
        public required int OrderId {get; set;}
        public DateOnly OrderDate { get; set; }
    }

    // Mockup for products, orders & orderlines (temporary)
    private List<Product> products = new List<Product>
    {
        new Product { ProductID = "1", Price = 100, Weight = 10, ProductName = "Phone" },
        new Product { ProductID = "2", Price = 200, Weight = 20, ProductName = "Fridge" },
        new Product { ProductID = "3", Price = 300, Weight = 30, ProductName = "Dishwasher" },
        new Product { ProductID = "4", Price = 400, Weight = 40, ProductName = "TV" }   
    };

    private List<OrderLine> orderlines = new List<OrderLine>
    {
        new OrderLine { Customer = "John Doe", ProductIDs = new List<string> { "1", "2" }, OrderId = 1, OrderDate = new DateOnly(2025, 3, 1) },
        new OrderLine { Customer = "Jane Doe", ProductIDs = new List<string> { "3", "4" }, OrderId = 2, OrderDate = new DateOnly(2025, 3, 5) },
        new OrderLine { Customer = "James Bond", ProductIDs = new List<string> { "1", "2" }, OrderId = 3, OrderDate = new DateOnly(2025, 3, 10) },
        new OrderLine { Customer = "Jason Bourne", ProductIDs = new List<string> { "3", "4" }, OrderId = 4, OrderDate = new DateOnly(2025, 3, 15) },
        new OrderLine { Customer = "FÃ¦tter Guf", ProductIDs = new List<string> { "1", "2" }, OrderId = 5, OrderDate = new DateOnly(2025, 3, 20) },
        new OrderLine { Customer = "Casper Holm Bach", ProductIDs = new List<string> { "3", "4" }, OrderId = 6, OrderDate = new DateOnly(2025, 3, 25) },
        new OrderLine { Customer = "Tobias Hansen", ProductIDs = new List<string> { "1", "2" }, OrderId = 7, OrderDate = new DateOnly(2025, 3, 30) },
        new OrderLine { Customer = "Karem Jahjah", ProductIDs = new List<string> { "3", "4" }, OrderId = 8, OrderDate = new DateOnly(2025, 3, 28) },
        new OrderLine { Customer = "Lucas Barlach", ProductIDs = new List<string> { "1", "2" }, OrderId = 9, OrderDate = new DateOnly(2025, 3, 26) },
        new OrderLine { Customer = "Mads Mikkelsen", ProductIDs = new List<string> { "3", "4" }, OrderId = 10, OrderDate = new DateOnly(2025, 3, 24) }
    };
}