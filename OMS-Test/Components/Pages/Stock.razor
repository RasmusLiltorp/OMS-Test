@page "/OMS/Stock"
@using BlazorBootstrap
@using OMS_Services
@inject DataService DataService
@inject NavigationManager Navigation
@using DTOs

<PageTitle>Stock</PageTitle>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<div class="topnav">
    <a href="./OMS/Manage">OMS</a>
    <a href="./OMS/SalesReportsOverview">Sales Reports</a>
    <a class="active" href="./OMS/Stock">Stock</a>
</div>

<div class="container mt-4">
    <h3>Product Stock</h3>
    <div class="row mt-4 justify-content-center">
        <div class="col-12">
            <div class="d-flex align-items-center">
                <input type="text" value="@searchText" @oninput="OnSearchTextChanged" class="form-control flex-grow-1"
                       placeholder="Search by Product ID or Name..." />
            </div>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <small class="mb-0">Product Results</small>
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button"
                        data-bs-toggle="dropdown">
                    Page Size: @pageSize
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><button class="dropdown-item" @onclick="() => SetPageSize(10)">10</button></li>
                    <li><button class="dropdown-item" @onclick="() => SetPageSize(25)">25</button></li>
                    <li><button class="dropdown-item" @onclick="() => SetPageSize(50)">50</button></li>
                </ul>
            </div>
        </div>
        <div class="card-body">
            @if (pagedProducts.Count() == 0 && !string.IsNullOrWhiteSpace(searchText))
            {
                <div class="text-center text-muted py-5">
                    <i class="bi bi-emoji-frown" style="font-size: 3rem;"></i>
                    <p class="mt-3">No matching products found.</p>
                </div>
            }
            else
            {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Product ID</th>
                            <th>Product Name</th>
                            <th>Brand</th>
                            <th>Category</th>
                            <th>Stock</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in pagedProducts)
                        {
                            <tr>
                                <td>@product.ProductID</td>
                                <td>@product.ProductName</td>
                                <td>@product.BrandName</td>
                                <td>@product.ProductCategory</td>
                                <td>
                                    @if (stockLevels.TryGetValue(product.ProductID, out var stock))
                                    {
                                        <input type="text" class="form-control form-control-sm" style="width: 70px;" value="@stock" disabled />
                                    }
                                    else
                                    {
                                        <span class="text-muted">Loading...</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-success me-1" @onclick="() => AdjustStock(product.ProductID, 1)">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => AdjustStock(product.ProductID, -1)">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="d-flex justify-content-between align-items-center mt-3">
                    <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">
                        <i class="bi bi-chevron-left"></i> Previous
                    </button>
                    <span>Page @currentPage of @totalPages</span>
                    <button class="btn btn-outline-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">
                        Next <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;

    private List<ProductDTO> allProducts = new();
    private Dictionary<string, int> stockLevels = new();

    private IEnumerable<ProductDTO> filteredProducts =>
        allProducts.Where(p =>
            string.IsNullOrWhiteSpace(searchText) ||
            (p.ProductID?.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true) ||
            (p.ProductName?.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true)
        );

    private IEnumerable<ProductDTO> pagedProducts =>
        filteredProducts
            .OrderBy(p => p.ProductID)
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);

    private int totalPages => (int)Math.Ceiling((double)filteredProducts.Count() / pageSize);

    protected override async Task OnInitializedAsync()
    {
        allProducts = DataService.Products.ToList();
        await LoadStockLevelsAsync(allProducts);
        
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
    }

    private void SetPageSize(int size)
    {
        pageSize = size;
        currentPage = 1;
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private async Task LoadStockLevelsAsync(IEnumerable<ProductDTO> products)
    {
        foreach (var product in products)
        {
            var stock = await DataService.ApiService.GetProductStockAsync(product.ProductID);
            stockLevels[product.ProductID] = stock;
        }
        StateHasChanged();
    }

    private async Task AdjustStock(string productId, int changeAmount)
    {
        var success = await DataService.ApiService.AdjustProductStockAsync(productId, changeAmount);
        if (success)
        {
            var updatedStock = await DataService.ApiService.GetProductStockAsync(productId);
            stockLevels[productId] = updatedStock;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Failed to update stock for {productId}");
        }
    }
}
