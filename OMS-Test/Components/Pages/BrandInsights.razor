@page "/OMS/BrandInsights"
@using BlazorBootstrap
@using OMS_Services
@using DTOs
@inject DataService DataService
@inject AnalyticsService AnalyticsService
@inject NavigationManager NavigationManager
@inject IEmailService EmailService
@rendermode InteractiveServer

<PageTitle>Brand Insights</PageTitle>

<div class="topnav">
    <a href="./OMS/Manage">OMS</a>
    <a href="./OMS/SalesReportsOverview">Sales Reports</a>
</div>

<h2>Brand Insights</h2>

<h4>Select Periods to Compare</h4>

<div class="d-flex flex-wrap align-items-end gap-4 mb-4">
    <div class="d-flex align-items-center gap-2">
        <strong>Period 1</strong>
        <label>From:</label>
        <InputDate @bind-Value="fromDate1" class="form-control" style="width: 150px;" />
        <label>To:</label>
        <InputDate @bind-Value="toDate1" class="form-control" style="width: 150px;" />
    </div>

    <div class="d-flex align-items-center gap-2">
        <strong>Period 2</strong>
        <label>From:</label>
        <InputDate @bind-Value="fromDate2" class="form-control" style="width: 150px;" />
        <label>To:</label>
        <InputDate @bind-Value="toDate2" class="form-control" style="width: 150px;" />
    </div>
</div>

<h5>Filters</h5>
<div class="mb-3 d-flex align-items-end gap-3">
    <div>
        <label>Brand (only for Brand Comparison):</label>
        <select class="form-select" @bind="selectedBrand">
            <option value="">-- All Brands --</option>
            @foreach (var brand in allBrands)
            {
                <option value="@brand">@brand</option>
            }
        </select>
    </div>

    <div>
        <label>Category (only for Category Comparison):</label>
        <select class="form-select" @bind="selectedCategory">
            <option value="">-- All Categories --</option>
            @foreach (var category in allCategories)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>

    <button class="btn btn-primary" @onclick="CompareAnalytics">Apply & Compare</button>
</div>

<h3>Brand Analytics Comparison</h3>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Brand</th>
            <th>Units Sold (P1)</th>
            <th>Revenue (P1)</th>
            <th>Units Sold (P2)</th>
            <th>Revenue (P2)</th>
            <th>Units Diff.</th>
            <th>Revenue Diff.</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var brand in brandComparison)
        {
            <tr>
                <td>@brand.BrandName</td>
                <td>@brand.Period1UnitsSold</td>
                <td>@brand.Period1Revenue.ToString("C")</td>
                <td>@brand.Period2UnitsSold</td>
                <td>@brand.Period2Revenue.ToString("C")</td>
                <td>@(brand.Period2UnitsSold - brand.Period1UnitsSold)</td>
                <td>@((brand.Period2Revenue - brand.Period1Revenue).ToString("C"))</td>
            </tr>
        }
    </tbody>
</table>

<h3>Category Analytics Comparison</h3>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Category</th>
            <th>Units Sold (P1)</th>
            <th>Revenue (P1)</th>
            <th>Units Sold (P2)</th>
            <th>Revenue (P2)</th>
            <th>Units Diff.</th>
            <th>Revenue Diff.</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var category in categoryComparison)
        {
            <tr>
                <td>@category.CategoryName</td>
                <td>@category.Period1UnitsSold</td>
                <td>@category.Period1Revenue.ToString("C")</td>
                <td>@category.Period2UnitsSold</td>
                <td>@category.Period2Revenue.ToString("C")</td>
                <td>@(category.Period2UnitsSold - category.Period1UnitsSold)</td>
                <td>@((category.Period2Revenue - category.Period1Revenue).ToString("C"))</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private DateOnly fromDate1 = new(2025, 3, 1);
    private DateOnly toDate1 = new(2025, 3, 15);
    private DateOnly fromDate2 = new(2025, 3, 16);
    private DateOnly toDate2 = new(2025, 3, 31);
    private string selectedBrand = "";
    private string selectedCategory = "";

    private List<string> allBrands = new();
    private List<string> allCategories = new();
    private List<BrandAnalyticsComparerDTO> brandComparison = new();
    private List<CategoryComparisonDTO> categoryComparison = new();

    protected override async Task OnInitializedAsync()
    {
        allBrands = DataService.GetAllBrands();
        allCategories = DataService.GetAllCategories();
    }

    protected void CompareTwoTimePeriodsBrand(string brandName, DateOnly fromDate1, DateOnly toDate1, DateOnly fromDate2, DateOnly toDate2)
    {
        var brandAnalyticsFirstPeriod = AnalyticsService.CompareBrandsInterval(brandName, fromDate1, toDate1);
        var brandAnalyticsSecondPeriod = AnalyticsService.CompareBrandsInterval(brandName, fromDate2, toDate2);
        
        if (brandAnalyticsFirstPeriod.TryGetValue(brandName, out var firstPeriodData) && 
            brandAnalyticsSecondPeriod.TryGetValue(brandName, out var secondPeriodData))
        {
            var brandAnalytics = new BrandAnalyticsComparerDTO
            {
                BrandName = brandName,
                Period1UnitsSold = firstPeriodData.PeriodUnitsSold,
                Period1Revenue = firstPeriodData.PeriodRevenue,
                Period2UnitsSold = secondPeriodData.PeriodUnitsSold,
                Period2Revenue = secondPeriodData.PeriodRevenue
            };
            
            brandComparison.Add(brandAnalytics);
        }
    }
    
    protected void CompareAnalytics()
    {
        brandComparison.Clear();
        categoryComparison.Clear();
        
        if (string.IsNullOrEmpty(selectedBrand))
        {
            foreach (var brand in allBrands)
            {
                CompareTwoTimePeriodsBrand(brand, fromDate1, toDate1, fromDate2, toDate2);
            }
        }
        else
        {
            CompareTwoTimePeriodsBrand(selectedBrand, fromDate1, toDate1, fromDate2, toDate2);
        }
        
        // TODO: Add similar logic for category comparison
        
        StateHasChanged();
    }

}
