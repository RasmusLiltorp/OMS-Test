@page "/OMS/Manage"
@using BlazorBootstrap
@rendermode InteractiveServer

<PageTitle>Order Management System</PageTitle>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<div class="topnav">
  <a href="./OMS/Manage">OMS</a>
  <a href="./OMS/SalesReportsOverview">Sales Reports</a>
</div>

<div class="container mt-4">
    <h3>Order Management System</h3>
    <div class="row mt-4 justify-content-center">
        <div class="col-12">
            <div class="autocompletBox d-flex align-items-center">
                <AutoComplete @bind-Value="searchText"
                            TItem="Order"
                            DataProvider="OrdersDataProvider"
                            PropertyName="OrderId"
                            Placeholder="Search for an order ID..."
                            OnChanged="OnOrderSelected"
                            @onkeypress="HandleKeyPress"
                            class="form-control flex-grow-1" />
                <button class="btn btn-outline-primary ms-1" type="button" @onclick="PerformSearch">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="mt-4">
        <div class="card">
            <div class="card-header bg-light">
                <small class="mb-0">Quick search results</small>
            </div>
            <div class="card-body">
                @if(hasSearched == false)
                {
                    <div class="text-center text-muted py-5">
                        <i class="bi bi-search" style="font-size: 3rem;"></i>
                        <p class="mt-3">Enter an order ID and click search to view results</p>
                    </div>
                }
                else if (searchResults.Count == 0)
                {
                    <div class="text-center text-muted py-5">
                        <i class="bi bi-emoji-frown" style="font-size: 3rem;"></i>
                        <p class="mt-3">No results found for order ID: @searchText</p>
                    </div>
                }
                else
                {
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                            </tr>
                        </thead>            
                        <tbody>
                            @foreach (var order in searchResults)
                            {
                                <tr>
                                    <td>@order.OrderId</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string searchText = string.Empty;
    private bool hasSearched = false;
    private List<Order> searchResults = new List<Order>();
    
    // Mockup for orders (temporary)
    private List<Order> orders = new List<Order>
    {
        new Order { OrderId = "1" },
        new Order { OrderId = "11" },
        new Order { OrderId = "2" },
        new Order { OrderId = "3" },
        new Order { OrderId = "4" },
        new Order { OrderId = "1111" }
    };

    private void UpdateSearchText(string value)
    {
        searchText = value;    
    }

    private async Task<AutoCompleteDataProviderResult<Order>> OrdersDataProvider(AutoCompleteDataProviderRequest<Order> request)
    {
        string? searchInput = null;
        await Task.Delay(1);
        if (request.Filter != null)
        {
            searchInput = request.Filter.Value.ToString();
            UpdateSearchText(searchInput);


        }
        var filteredOrders = string.IsNullOrEmpty(searchInput)
            ? new List<Order>()
            : orders.Where(o => o.OrderId.Contains(searchInput, StringComparison.OrdinalIgnoreCase)).ToList();
        
        return new AutoCompleteDataProviderResult<Order> 
        { 
            Data = filteredOrders, 
            TotalCount = filteredOrders.Count() 
        };
    }

    // Handle when an order is selected from autocomplete
    private void OnOrderSelected(Order order)
    {
        if (order != null)
        {
            searchText = order.OrderId;
            PerformSearch();
        }
    }
    
    private void HandleKeyPress(KeyboardEventArgs k)
    {
        if (k.Key == "Enter")
        {
            PerformSearch();
        }
    }

    private void PerformSearch()
    {
        hasSearched = true;
        if (string.IsNullOrEmpty(searchText))
        {
            searchResults.Clear();
            return;
        }
        
        searchResults = orders.Where(o => o.OrderId.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();

        StateHasChanged();
    }
    
    public class Order
    {
        public required string OrderId { get; set; }
    }
}