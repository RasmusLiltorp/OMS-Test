@page "/OMS/Manage"
@using BlazorBootstrap
@using OMS_Test.Services
@inject MockDataService MockData
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject IEmailService EmailService
@using DTOs

<PageTitle>Order Management System</PageTitle>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<div class="topnav">
  <a href="./OMS/Manage">OMS</a>
  <a href="./OMS/SalesReportsOverview">Sales Reports</a>
</div>

<div class="container mt-4">
    <h3>Order Management System</h3>
    <div class="row mt-4 justify-content-center">
        <div class="col-12">
            <div class="d-flex align-items-center gap-2">
                <input type="text"
                       value="@searchText"
                       @oninput="OnSearchTextChanged"
                       class="form-control"
                       placeholder="Search by order ID or customer..." />

                <button class="btn btn-outline bg-success text-white" type="button" title="Create Order" @onclick="CreateOrder">
                    <i class="bi bi-plus-lg"></i>
                </button>
                <button class="btn btn-outline bg-warning text-white" type="button" title="Modify Order" @onclick="ModifyOrder">
                    <i class="bi bi-pencil-fill"></i>
                </button>
                <button class="btn btn-outline bg-danger text-white" type="button" title="Delete Order" @onclick="OpenDeleteModal">
                    <i class="bi bi-dash-lg"></i>
                </button>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <div class="card">
            <div class="card-header bg-light">
                <small class="mb-0">Quick search results</small>
            </div>
            <div class="card-body">
                @if (filteredOrders.Count == 0 && !string.IsNullOrWhiteSpace(searchText))
                {
                    <div class="text-center text-muted py-5">
                        <i class="bi bi-emoji-frown" style="font-size: 3rem;"></i>
                        <p class="mt-3">No results found for: @searchText</p>
                    </div>
                }
                else
                {
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Date</th>
                                <th>Total</th>
                                <th></th> <!-- Send and see Receipt -->
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in filteredOrders)
                            {
                                <tr>
                                    <td>@order.OrderId</td>
                                    <td>@order.Customer</td>
                                    <td>@order.OrderDate.ToString("dd MMM yyyy")</td>
                                    <td>@MockData.CalculateOrderTotal(order).ToString("0.00") DKK</td>
                                    <td colspan="2">
                                        <div class="d-flex justify-content-end flex-column flex-md-row gap-1">
                                            <button class="btn btn-sm btn-outline-success w-5" @onclick="() => SendReceipt(order.OrderId)">
                                                <i class="bi"></i> Send Receipt
                                            </button>
                                            <button class="btn btn-sm btn-outline-primary w-5" @onclick="() => ViewReceipt(order.OrderId)">
                                                <i class="bi"></i> See Receipt
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">
                            <i class="bi bi-chevron-left"></i> Previous
                        </button>
                        <span>Page @currentPage of @totalPages</span>
                        <button class="btn btn-outline-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">
                            Next <i class="bi bi-chevron-right"></i>
                        </button>
                    </div>
                }
            </div>

            @if (showDeleteModal)
            {
                <div class="modal show d-block" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Delete Order</h5>
                                <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                            </div>
                            <div class="modal-body">
                                <label class="form-label">Search Order ID or Customer</label>
                                <input class="form-control mb-3" @bind="deleteSearchText" @bind:event="oninput" placeholder="Type to search..." />

                                <select class="form-select mb-3" @bind="selectedDeleteOrderId">
                                    <option disabled selected value="">-- Choose an order --</option>
                                    @foreach (var order in FilteredDeleteOrders)
                                    {
                                        <option value="@order.OrderId">
                                            Order #@order.OrderId - @order.Customer
                                        </option>
                                    }
                                </select>

                                @if (!string.IsNullOrEmpty(deleteMessage))
                                {
                                    <div class="alert alert-success">@deleteMessage</div>
                                }
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                                <button class="btn btn-danger" @onclick="ConfirmDelete" disabled="@(!selectedDeleteOrderId.HasValue)">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-backdrop fade show"></div>
            }
        </div>
    </div>
</div>

@code {
    private string? searchText = string.Empty;
    private List<OrderLine>? orders;

    private int currentPage = 1;
    private int pageSize = 10;

    protected override void OnInitialized()
    {
        orders = MockData.OrderLines ?? new List<OrderLine>();
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString();
        currentPage = 1;
    }

    private List<OrderLine> filteredOrders => pagedOrders.ToList();

    private IEnumerable<OrderLine> pagedOrders =>
        orders?
            .Where(o =>
                string.IsNullOrWhiteSpace(searchText) ||
                o.OrderId.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (o.Customer?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false))
            .OrderBy(o => o.OrderId)
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
        ?? Enumerable.Empty<OrderLine>();

    private int totalFilteredCount => orders?
        .Count(o =>
            string.IsNullOrWhiteSpace(searchText) ||
            o.OrderId.ToString().Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
            (o.Customer?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false))
        ?? 0;

    private int totalPages => (int)Math.Ceiling((double)totalFilteredCount / pageSize);

    private void SetPageSize(int size)
    {
        pageSize = size;
        currentPage = 1;
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private bool showDeleteModal = false;
    private string? deleteSearchText;
    private int? selectedDeleteOrderId;
    private string? deleteMessage;

    private IEnumerable<OrderLine> FilteredDeleteOrders =>
        string.IsNullOrWhiteSpace(deleteSearchText)
            ? orders!.Take(10)
            : orders!
                .Where(o =>
                    o.OrderId.ToString().Contains(deleteSearchText, StringComparison.OrdinalIgnoreCase) ||
                    (o.Customer?.Contains(deleteSearchText, StringComparison.OrdinalIgnoreCase) ?? false))
                .Take(10);

    private void OpenDeleteModal()
    {
        deleteSearchText = string.Empty;
        selectedDeleteOrderId = null;
        deleteMessage = null;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        deleteSearchText = string.Empty;
        selectedDeleteOrderId = null;
        deleteMessage = null;
    }

    private void ConfirmDelete()
    {
        if (selectedDeleteOrderId.HasValue)
        {
            var orderToDelete = MockData.OrderLines?.FirstOrDefault(o => o.OrderId == selectedDeleteOrderId.Value);
            if (orderToDelete != null)
            {
                MockData.OrderLines?.Remove(orderToDelete);
                deleteMessage = $"Order #{orderToDelete.OrderId} deleted successfully.";
                selectedDeleteOrderId = null;

                orders?.Remove(orderToDelete);
            }
        }
    }

    private void CreateOrder()
    {
        Navigation.NavigateTo("/OMS/CreateOrder");
    }

    private void ModifyOrder()
    {
        Navigation.NavigateTo("/OMS/ModifyOrder");
    }

    private async Task SendReceipt(int orderId)
    {
        var order = MockData.OrderLines?.FirstOrDefault(o => o.OrderId == orderId);
        if (order != null)
        {
            await EmailService.SendOrderReceiptAsync(order);
        }
    }

    private void ViewReceipt(int orderId)
    {
        Navigation.NavigateTo($"/OMS/Receipt/{orderId}");
    }
}